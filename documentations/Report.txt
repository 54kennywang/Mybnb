/**
     * Get the number of bookings in a city in a specified time window
     *
     * @param fromDate time window start
     * @param toDate time window end
     * @param city a city name
     * @return the number of bookings in a city in a specified time window
     */
    public static int numOfBookingsByCity(LocalDate fromDate, LocalDate toDate, String city)

/**
     * Get the number of bookings in a zipCode area in a specified time window
     *
     * @param fromDate time window start
     * @param toDate time window end
     * @param zipCode a zipCode
     * @return the number of bookings in a zipCode area in a specified time window
     */
    public static int numOfBookingsByZipCode(LocalDate fromDate, LocalDate toDate, String zipCode)

/**
     * Get the number of listing for different countries
     *
     * @return a table of the number of listing for different countries
     *  [country, count(listing.id)]
     */
    public static List<Row> numOfListingsPerCountry()

/**
     * Get the number of listing for different (country, city) pair
     *
     * @return a table of the number of listing for different (country, city) pair
     *  [city, country, count(listing.id)]
     */
    public static List<Row> numOfListingsPerCountryPerCity()

/**
     * Get the number of listing for different (country, city, pcode) pair
     *
     * @return a table of the number of listing for different (country, city, pcode) pair
     *  [city, pcode, country, count(listing.id)]
     */
    public static List<Row> numOfListingsPerCountryPerCityPerPCode()


/**
     * Get the table of number of listings for different hosts in different countries, descending order by count (all records)
     *
     * @param country country name
     * @return a table of number of listings for different hosts in different countries, descending order by count (all records)
     *  [ownerID, country, count(listing.id)]
     */
    public static List<Row> rankHostsByListingsPerCountry(String country)

/**
     * Get the table of number of listings for different hosts in different cities, descending order by count (all records)
     *
     * @param country country name
     * @param city city name
     * @return a table of number of listings for different hosts in different cities, descending order by count (all records)
     *  [ownerID, city, count(listing.id)]
     */
    public static List<Row> rankHostsByListingsPerCity(String country, String city)

/**
     * Get the table of renter booking (lived) times in a time window
     *
     * @param startDate time window begin time
     * @param toDate    time window ending time
     * @return a table of renter booking (lived) times in a time window
     * [u_id, country, city, count]
     */
    public static List<Row> rankRentersByNumOfBookings(LocalDate startDate, LocalDate toDate)


/**
     * Get the table of renter booking (lived) times in a time window in a particular city
     *
     * @param startDate time window begin time
     * @param toDate    time window ending time
     * @param country   country name
     * @param city      city name
     * @return a table of renter booking (lived) times in a time window in a particular city
     * [u_id, country, city, count]
     */
    public static List<Row> rankRentersByNumOfBookingsPerCity(LocalDate startDate, LocalDate toDate, String country, String city)

/**
     * Get the table of overposting users, if fromDate and toDate are not empty, a time window is specified
     *
     * @param fromDate time window start
     * @param toDate   time window end
     * @return a table of overposting users
     * [owner, count, count_percentage]
     */
    public static List<Row> spamPosting(String fromDate, String toDate)


/**
     * Get a table of largest cancellation times in a specified time window for host/renter (at least one row, maybe severa users have same largest num)
     *
     * @param type     1 - renter; 2 - host
     * @param fromDate time window begin time
     * @param toDate   time window ending time
     * @return a table of largest cancellation times in a specified time window for host/renter
     * [u_id, count]
     */
    public static List<Row> largestCancellation(int type, String fromDate, String toDate)
