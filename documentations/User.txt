/**
	 * Register a new user
	 * @param userInfo [email, cardNum, name, occ, DOB, SIN, password]
	 * @param addrInfo [street, city, pcode, country]
	 * @return true if register successfully; false otherwise
	 */
	public Boolean register(List<String> userInfo, List<String> addrInfo)


/**
	 * Sign in a user
	 * @param info [email, password]
	 * @return true if signIn successfully; false otherwise
	 */
	public Boolean signIn(List<String> info)


/**
	 * SignOut the current user
	 * @return true if sign out successfully; false otherwise
	 */
	public Boolean signOut()


/**
	 * Get user's id
	 * @return user's id
	 */
	public Integer getId()

/**
     * Get user's type
     *
     * @return user's type
     */
    public Integer getType()

/**
	 * Reply to a comment on a user
	 * @param info [receiver, parent_comment, content]
	 * @return true if comment successfully; false otherwise
	 */
	public Boolean replyUserComment(List<String> info)


/**
     	* Get comments on a user/listing
     	*
     	* @param id user/listing's id
     	* @param type 1 - user; 0 - listing
     	* @return listing of tables of comments, each table is a comment block
     	* table schema: [id, parent_comment, sender, sender_name, receiver, receiver_name, rating, content, date]
     	* i.e. * initial comment 1			 |	* initial comment 2
     	* - reply to comment 1 (1)	 |	  - reply to comment 2 (7)
     	* - reply to (1) (2)		 |	  - reply to (7) (8)           => two comment blocks on a user
     	* - reply to (2) (3)		 |	  - reply to (8) (9)
     	*/
    	public static List<List<Row>> getComments(int id, int type)


/**
     * View comments on a user/listing and it's average rating
     *
     * @param id   user/listing's id
     * @param type 1 - user; 0 - listing
     * @return true if comments exost; false otherwise
     */
    public static boolean viewComments(int id, int type)

/**
     	* Get a user/listing's average rating
     	*
     	* @param id a user/listing's id
     	* @param type 1 - user; 0 - listing
     	* @return a user/listing's average rating
     	*/
    	public static Double getRating(int id, int type)

/**
     * User cancels a booking
     *
     * @param info [l_id, fromDate, toDate]
     * @param type 1 - renter; 2 - host
     * @return true if successfully; false otherwise
     */
    public Boolean cancelBooking(List<String> info, int type)


/**
     * Get user's info
     *
     * @param id user id
     * @return a row of table containing user's info [u_id, name]
     */
    public static List<Row> getUserInfo(int id)


/**
     * View info about a user
     *
     * @param id   user id
     * @return true if user exists; false otherwise
     */
    public static boolean viewUserInfo(int id)


/**
     * Reply to a comment on a listing
     *
     * @param info [receiver, parent_comment, content, l_id]
     * @return true if successfully; false otherwise
     */
    public Boolean replyListingComment(List<String> info)




















	
